@startuml
class com.example.todoc.ui.taskList.MainActivityViewModel {
- TaskRepository taskRepository
- MediatorLiveData<List<TaskViewStateItem>> taskViewStateItemsMediatorLiveData
- MutableLiveData<SortMethod> sortMethodMutableLiveData
- MutableLiveData<Boolean> isNoTaskTextViewVisible
- void combine(List<ProjectWithTasks>,SortMethod)
+ MutableLiveData<Boolean> getIsNoTaskTextViewVisible()
+ LiveData<List<TaskViewStateItem>> getTaskViewStateItemsMediatorLiveData()
+ void onDeleteTask(long)
- void updateNoTaskTextViewVisibility()
+ void onSortingTasksSelected(SortMethod)
- void sortTasksChronologicallyReversed(List<TaskViewStateItem>)
- void sortTasksChronologically(List<TaskViewStateItem>)
- void sortTasksAlphabeticallyReversed(List<TaskViewStateItem>)
- void sortTasksAlphabetically(List<TaskViewStateItem>)
}
class com.example.todoc.data.repositories.ProjectRepository {
- ProjectDao dao
+ LiveData<List<ProjectEntity>> getAllProjects()
}
class com.example.todoc.data.entities.ProjectWithTasks {
+ ProjectEntity project
+ List<TaskEntity> tasks
+ ProjectEntity getProject()
+ List<TaskEntity> getTasks()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
enum com.example.todoc.ui.taskList.SortMethod {
+  ALPHABETICAL
+  ALPHABETICAL_INVERTED
+  RECENT_FIRST
+  OLD_FIRST
+  NONE
}
class com.example.todoc.data.entities.ProjectEntity {
- long id
- String projectName
- int projectColor
+ long getId()
+ String getProjectName()
+ int getProjectColor()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
interface com.example.todoc.ui.taskList.OnTaskDeleteClickListener {
~ void onDeleteTask(long)
}
class com.example.todoc.data.entities.TimeStampConverter {
+ {static} Timestamp toTimestamp(Long)
+ {static} Long toLong(Timestamp)
}
class com.example.todoc.ui.taskList.MainActivity {
- MainActivityViewModel viewModel
- ActivityMainBinding binding
# void onCreate(Bundle)
- void updateEmptyTaskListTextView()
- void initRecyclerView()
- void setViewModel()
+ boolean onCreateOptionsMenu(Menu)
+ boolean onOptionsItemSelected(MenuItem)
}
class com.example.todoc.ui.addTask.ProjectArrayAdapter {
- Map<String,Long> projectIdMap
+ long getProjectId(String)
}
class com.example.todoc.ui.utils.SingleLiveEvent {
- {static} String TAG
- AtomicBoolean mPending
+ void observe(LifecycleOwner,Observer<? super T>)
+ void setValue(T)
+ void call()
}
interface com.example.todoc.data.dao.TaskDao {
~ void insertTask(TaskEntity)
~ void deleteTask(long)
~ LiveData<List<ProjectWithTasks>> getProjectWithTasks()
}
class com.example.todoc.ui.addTask.AddNewTaskDialogFragmentViewModel {
- ProjectRepository projectRepository
- TaskRepository taskRepository
- SingleLiveEvent<Void> closeDialogFragment
- MutableLiveData<Boolean> isProjectFieldComplete
- MutableLiveData<Boolean> isTaskFieldComplete
- MutableLiveData<String> chosenProjectMutableLiveData
- MediatorLiveData<Boolean> isEveryFieldComplete
- void combine()
+ LiveData<List<ProjectEntity>> getAllProjects()
+ SingleLiveEvent<Void> getCloseFragment()
+ MediatorLiveData<Boolean> getIsEveryFieldComplete()
+ MutableLiveData<String> getChosenProjectMutableLiveData()
+ void onAddingNewTask(String,long)
+ void updateForTaskDescriptionCompletion(String)
+ void updateForChosenProjectSelection(String)
}
class com.example.todoc.adapter.TaskListAdapter {
- OnTaskDeleteClickListener listener
+ TaskViewHolder onCreateViewHolder(ViewGroup,int)
+ void onBindViewHolder(TaskViewHolder,int)
}
class com.example.todoc.adapter.TaskListAdapter.TaskViewHolder {
- ImageView deleteTask
- ImageView imgProject
- TextView taskDescription
- TextView projectName
+ void bind(TaskViewStateItem,OnTaskDeleteClickListener)
}
class com.example.todoc.adapter.TaskListAdapter.ListTaskItemCallback {
+ boolean areItemsTheSame(TaskViewStateItem,TaskViewStateItem)
+ boolean areContentsTheSame(TaskViewStateItem,TaskViewStateItem)
}
class com.example.todoc.DI.ViewModelFactory {
- TaskRepository taskRepository
- ProjectRepository projectRepository
- {static} int THREADS
- {static} Executor EXECUTOR
- {static} ViewModelFactory factory
+ {static} ViewModelFactory getInstance()
+ T create(Class<T>)
}
abstract class com.example.todoc.data.AppDatabase {
+ {static} AppDatabase INSTANCE
+ {abstract}TaskDao getTaskDao()
+ {abstract}ProjectDao getProjectDao()
+ {static} AppDatabase getDatabase(Application,Executor)
}
class com.example.todoc.data.AppDatabase.RoomDatabaseCallback {
- Executor executor
+ void onCreate(SupportSQLiteDatabase)
}
interface com.example.todoc.data.dao.ProjectDao {
~ void insertProject(ProjectEntity)
~ LiveData<List<ProjectEntity>> getProjects()
}
class com.example.todoc.ui.addTask.AddNewTaskDialogFragment {
- FragmentAddNewTaskDialogBinding binding
- String chosenProject
- AddNewTaskDialogFragmentViewModel viewModel
+ {static} AddNewTaskDialogFragment newInstance()
+ View onCreateView(LayoutInflater,ViewGroup,Bundle)
+ void onViewCreated(View,Bundle)
- void setProjectACTVAdapter()
- void setupObservers()
- void getChosenProject()
- void addNewTask()
}
class com.example.todoc.ui.taskList.TaskViewStateItem {
- long taskId
- String taskDescription
- String projectName
- int projectColor
- Timestamp taskTimeStamp
+ long getTaskId()
+ String getTaskDescription()
+ String getProjectName()
+ int getProjectColor()
+ Timestamp getTaskTimeStamp()
+ String toString()
+ boolean equals(Object)
+ int hashCode()
}
class com.example.todoc.data.repositories.TaskRepository {
- TaskDao dao
- Executor executor
+ void addNewTask(TaskEntity)
+ void deleteTask(long)
+ LiveData<List<ProjectWithTasks>> getProjectWithTasks()
}
class com.example.todoc.data.entities.TaskEntity {
- long id
- String taskDescription
- Timestamp taskTimeStamp
- long projectId
+ long getId()
+ String getTaskDescription()
+ Timestamp getTaskTimeStamp()
+ long getProjectId()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
class com.example.todoc.MainApplication {
- {static} Application sApplication
+ void onCreate()
+ {static} Application getApplication()
}


androidx.lifecycle.ViewModel <|-- com.example.todoc.ui.taskList.MainActivityViewModel
androidx.appcompat.app.AppCompatActivity <|-- com.example.todoc.ui.taskList.MainActivity
android.widget.ArrayAdapter <|-- com.example.todoc.ui.addTask.ProjectArrayAdapter
androidx.lifecycle.MutableLiveData <|-- com.example.todoc.ui.utils.SingleLiveEvent
androidx.lifecycle.ViewModel <|-- com.example.todoc.ui.addTask.AddNewTaskDialogFragmentViewModel
androidx.recyclerview.widget.ListAdapter <|-- com.example.todoc.adapter.TaskListAdapter
com.example.todoc.adapter.TaskListAdapter +.. com.example.todoc.adapter.TaskListAdapter.TaskViewHolder
com.example.todoc.adapter.ViewHolder <|-- com.example.todoc.adapter.TaskListAdapter.TaskViewHolder
com.example.todoc.adapter.TaskListAdapter +.. com.example.todoc.adapter.TaskListAdapter.ListTaskItemCallback
com.example.todoc.adapter.ItemCallback <|-- com.example.todoc.adapter.TaskListAdapter.ListTaskItemCallback
com.example.todoc.DI.Factory <|.. com.example.todoc.DI.ViewModelFactory
androidx.room.RoomDatabase <|-- com.example.todoc.data.AppDatabase
com.example.todoc.data.AppDatabase +.. com.example.todoc.data.AppDatabase.RoomDatabaseCallback
com.example.todoc.data.Callback <|-- com.example.todoc.data.AppDatabase.RoomDatabaseCallback
androidx.fragment.app.DialogFragment <|-- com.example.todoc.ui.addTask.AddNewTaskDialogFragment
android.app.Application <|-- com.example.todoc.MainApplication
@enduml